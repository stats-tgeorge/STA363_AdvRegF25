{
  "hash": "0ff9ba0bcfb2eb20dd022b425b631eb8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Moving Beyond Linearity\"\nsubtitle: \"ISLR Chapter 7\"\nformat: \n  revealjs:\n    output-file: \"10_nonlinear_ch7.html\"\n    slide-number: true\n  html:\n    output-file: \"10_nonlinear_ch7_o.html\"\nlogo: \"../img/favicon.png\"\n---\n\n\n\n## Setup\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ISLR)\nlibrary(tidymodels)\nlibrary(DALEXtra)\nco <- read.table(\"data/co.dat\", col.names = c(\"age\", \"pop\"), header = FALSE)\n```\n:::\n\n\n\n## Non-linear relationships\n\n::: question\nWhat have we used so far to deal with non-linear relationships?\n:::\n\n. . .\n\nPolynomials!\n\n## Polynomials {.smaller}\n\n$$y_i = \\beta_0 + \\beta_1x_i + \\beta_2x_i^2+\\beta_3x_i^3 \\dots + \\beta_dx_i^d+\\epsilon_i$$\n\n. . .\n\n:::{.panel-tabset}\n\n### Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](10-non-linear_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n### Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(co, aes(age, pop)) + \n  geom_point() + \n  geom_smooth(formula = y ~ poly(x, 4), method = \"lm\")\n```\n:::\n\n\n\nThis is data from the Columbia World Fertility Survey (1975-76) to\nexamine household compositions\n\n:::\n\n\n\n## Polynomials {.small}\n\n$$y_i = \\beta_0 + \\beta_1x_i + \\beta_2x_i^2+\\beta_3x_i^3 \\dots + \\beta_dx_i^d+\\epsilon_i$$\n\n:::{.panel-tabset}\n\n### Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](10-non-linear_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n-   Fit here with a 4th degree polynomial\n\n### Code \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(co, aes(age, pop)) + \n  geom_point() + \n  geom_smooth(formula = y ~ poly(x, 4), method = \"lm\")\n```\n:::\n\n\n\n:::\n\n\n\n\n## How is it done? {.small}\n\n-   New variables are created ( $X_1 = X$, $X_2 = X^2$, $X_3 = X^3$,\netc) and treated as multiple linear regression\n-   We are *not* interested in the individual coefficients, we are\ninterested in how a *specific* $x$ value behaves\n-   $\\hat{f}(x_0) = \\hat\\beta_0 + \\hat\\beta_1x_0 + \\hat\\beta_2x_0^2 + \\hat\\beta_3x_0^3 + \\hat\\beta_4x_0^4$\n-   *or more often a change between two values*, $a$ and $b$\n-   $\\hat{f}(b) -\\hat{f}(a) = \\hat\\beta_1b + \\hat\\beta_2b^2 + \\hat\\beta_3b^3 + \\hat\\beta_4b^4 - \\hat\\beta_1a - \\hat\\beta_2a^2 - \\hat\\beta_3a^3 -\\hat\\beta_4a^4$\n-   $\\hat{f}(b) -\\hat{f}(a) =\\hat\\beta_1(b-a) + \\hat\\beta_2(b^2-a^2)+\\hat\\beta_3(b^3-a^3)+\\hat\\beta_4(b^4-a^4)$\n\n## Polynomial Regression {.small}\n\n$$\\hat{f}(b) -\\hat{f}(a) =\\hat\\beta_1(b-a) + \\hat\\beta_2(b^2-a^2)+\\hat\\beta_3(b^3-a^3)+\\hat\\beta_4(b^4-a^4)$$\n\n::: question\nHow do you pick $a$ and $b$?\n:::\n\n-   If given no other information, a sensible choice may be the 25th and\n75th percentiles of $x$\n\n## Polynomial Regression\n\n:::{.panel-tabset}\n\n### Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](10-non-linear_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n### Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(co, aes(x = age, y = pop)) + \n  geom_point() + \n  geom_smooth(formula = y ~ poly(x, 4), method = \"lm\") + \n  geom_vline(xintercept = c(24.5, 73.5), lty = 2)\n```\n:::\n\n\n\n:::\n\n## <i class=\"fas fa-laptop\"></i> `Application Exercise` {.smaller}\n\n$$pop = \\beta_0 + \\beta_1age + \\beta_2age^2 + \\beta_3age^3 +\\beta_4age^4+ \\epsilon$$\n\n. . .\n\n::: question\nUsing the information below, write out the equation to predicted change\nin population from a change in age from the 25th percentile (24.5) to a\n75th percentile (73.5).\n:::\n\n:::{.panel-tabset}\n\n### Model Result\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|term        |  estimate| std.error| statistic| p.value|\n|:-----------|---------:|---------:|---------:|-------:|\n|(Intercept) | 1672.0854|   64.5606|   25.8995|  0.0000|\n|age         |  -10.6429|    9.2268|   -1.1535|  0.2516|\n|I(age^2)    |   -1.1427|    0.3857|   -2.9627|  0.0039|\n|I(age^3)    |    0.0216|    0.0059|    3.6498|  0.0004|\n|I(age^4)    |   -0.0001|    0.0000|   -3.6540|  0.0004|\n\n\n:::\n:::\n\n\n\n### Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm(pop ~ age + I(age^2) + I(age^3) + I(age^4), data = co) %>%\n  tidy() \n```\n:::\n\n\n\n:::\n\n## Choosing $d$ {.small}\n\n$$y_i = \\beta_0 + \\beta_1x_i + \\beta_2x_i^2+\\beta_3x_i^3 \\dots + \\beta_dx_i^d+\\epsilon_i$$\n\n### Either:\n\n::: nonincremental\n-   Pre-specify $d$ (before looking üëÄ at your data!)\n-   Use cross-validation to pick $d$ (take statistical learning!)\n:::\n\n::: question\nWhy before looking? \n:::\n\n## Polynomial Regression\n\nPolynomials have notoriously bad tail behavior (so they can be bad for\nextrapolation)\n\n::: question\nWhat does this mean?\n:::\n\n## Step functions {.smaller}\n\nAnother way to create a transformation is to cut the variable into\ndistinct regions\n\n$$C_1(X) = I(X < 35), C_2(X) = I(35\\leq X<65), C_3(X) = I(X \\geq 65)$$\n\n. . .\n\n:::{.panel-tabset}\n\n### Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](10-non-linear_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n### Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod <- lm(pop ~ I(age < 35) + I(age >=35 & age < 65) + I(age >= 65), data = co)\np <- predict(mod)\nggplot(co, aes(x = age, y = pop)) +\n  geom_point() +\n  geom_line(aes(x = age, y = p), color = \"blue\")\n```\n:::\n\n\n\n:::\n\n## Step functions {.small}\n\n-   Create dummy variables for each group\n-   Include each of these variables in multiple regression\n-   The choice of cutpoints or **knots** can be problematic (and make a\nbig difference!)\n\n## Step functions {.small}\n\n$$C_1(X) = I(X < 35), C_2(X) = I(35\\leq X<65), C_3(X) = I(X \\geq 65)$$\n\n:::{.panel-tabset}\n\n### Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](10-non-linear_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n### Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod <- lm(pop ~ I(age < 35) + I(age >=35 & age < 65) + I(age >= 65), data = co)\np <- predict(mod)\nggplot(co, aes(x = age, y = pop)) +\n  geom_point() +\n  geom_line(aes(x = age, y = p), color = \"blue\")\n```\n:::\n\n\n\n:::\n::: question\nWhat is the predicted value when $age = 25$?\n:::\n\n## Step functions {.small}\n\n$$C_1(X) = I(X < 15), C_2(X) = I(15\\leq X<65), C_3(X) = I(X \\geq 65)$$\n\n:::{.panel-tabset}\n\n### Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](10-non-linear_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n### Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod <- lm(pop ~ I(age < 15) + I(age >=15 & age < 65) + I(age >= 65), data = co)\np <- predict(mod)\nggplot(co, aes(x = age, y = pop)) +\n  geom_point() +\n  geom_line(aes(x = age, y = p), color = \"blue\")\n```\n:::\n\n\n\n:::\n\n. . .\n\n::: question\nWhat is the predicted value when $age = 25$?\n:::\n\n## Piecewise polynomials {.small}\n\nInstead of a single polynomial in $X$ over it's whole domain, we can use\ndifferent polynomials in regions defined by knots\n\n$$y_i = \\begin{cases}\\beta_{01}+\\beta_{11}x_i + \\beta_{21}x^2_i+\\beta_{31}x^3_i+\\epsilon_i& \\textrm{if } x_i < c\\\\ \\beta_{02}+\\beta_{12}x_i + \\beta_{22}x_i^2 + \\beta_{32}x_{i}^3+\\epsilon_i&\\textrm{if }x_i\\geq c\\end{cases}$$\n\n::: question\nWhat could go wrong here?\n:::\n\n-   It would be nice to have constraints (like continuity!)\n-   Insert **splines!**\n\n## Examples\n\n![](img/splines.png)\n\n## Linear Splines {.small}\n\n*A linear spline with knots at* $\\xi_k$, $k = 1,\\dots, K$ is a piecewise\nlinear polynomial continuous at each knot\n\n$$y_i = \\beta_0 + \\beta_1b_1(x_i)+\\beta_2b_2(x_i)+\\dots+\\beta_{K+1}b_{K+1}(x_i)+\\epsilon_i$$\n\n-   $b_k$ are **basis functions**\n-   $\\begin{align}b_1(x_i)&=x_i\\\\ b_{k+1}(x_i)&=(x_i-\\xi_k)_+,k=1,\\dots,K\\end{align}$\n-   Here $()_+$ means the **positive part**\n-   $(x_i-\\xi_k)_+=\\begin{cases}x_i-\\xi_k & \\textrm{if } x_i>\\xi_k\\\\0&\\textrm{otherwise}\\end{cases}$\n\n\n\n## <i class=\"fas fa-pen\"></i> `Application Exercise` {.small}\n\nLet's create data set to fit a *linear spline* with 2 knots: 35 and 65.\n\n:::: columns\n\n::: {.column width=\"20%\"}\n\n| x   |\n|-----|\n| 4   |\n| 15  |\n| 25  |\n| 37  |\n| 49  |\n| 66  |\n|70   |\n|80   |\n:::\n\n::: {.column width=\"80%\"}\n::: nonincremental\n1.  Using the data to the left create a new dataset with three variables:\n$b_1(x), b_2(x), b_3(x)$\n2.  Write out the equation you would be fitting to estimate the effect\non some outcome $y$ using this linear spline\n:::\n:::\n\n::::\n\n\n## Linear Spline\n\n:::: columns\n\n::: {.column width=\"20%\"}\n\n| x   |\n|-----|\n| 4   |\n| 15  |\n| 25  |\n| 37  |\n| 49  |\n| 66  |\n|70   |\n|80   |\n\n:::\n\n::: {.column width=\"10%\"}\n\n### ‚û°Ô∏è\n:::\n\n::: {.column width=\"70%\"}\n| $b_1(x)$| $b_2(x)$ | $b_3(x)$|\n|-----|--------------|---------|\n| 4   | 0 | 0\n| 15  | 0 | 0\n| 25  | 0 | 0\n| 37  | 2 | 0\n| 49  | 14 | 0\n| 66  | 31 | 1\n|70   | 35 | 5\n|80   | 45 | 15\n:::\n\n::::\n\n## <i class=\"fas fa-pen\"></i> `Application Exercise` {.small}\n\nBelow is a linear regression model fit to include the 3 bases you just created with 2 knots: 35 and 65. Use the information here to draw the relationship between $x$ and $y$.\n\n:::{.panel-tabset}\n\n### Result\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|term        | estimate| std.error| statistic| p.value|\n|:-----------|--------:|---------:|---------:|-------:|\n|(Intercept) |     -0.3|       0.2|      -1.3|     0.3|\n|b1          |      2.0|       0.0|     231.3|     0.0|\n|b2          |     -2.0|       0.0|    -130.0|     0.0|\n|b3          |     -3.0|       0.0|    -116.5|     0.0|\n\n\n:::\n:::\n\n\n\n### Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1)\nd <- tibble(\n  b1 = c(4, 15, 25, 37, 49, 66, 70, 80),\n  b2 = ifelse(b1 < 35, 0, b1 - 35),\n  b3 = ifelse(b1 < 65, 0, b1 - 65),\n  y = 2 * b1 + -2 * b2 -3 * b3 + rnorm(8, sd = 0.25)\n)\nlm(y ~ b1 + b2 + b3, data = d) |>\n  tidy() |>\n  knitr::kable(digits = 1)\n```\n:::\n\n\n\n:::\n\n## Linear Splines {.small}\n\n::: {.column width=\"70%\"}\n| $b_1(x)$| $b_2(x)$ | $b_3(x)$| $\\hat{y}$\n|-----|--------------|---------|\n| 4   | 0 | 0 | $2 \\times 4 -2 \\times 0 - 3\\times 0 = 8$\n| 15  | 0 | 0 | $2 \\times 15 -2 \\times 0 - 3\\times 0 = 30$\n| 25  | 0 | 0 | $2 \\times 25 -2 \\times 0 - 3\\times 0 = 50$\n| 37  | 2 | 0 | $2 \\times 37 -2 \\times 2 - 3\\times 0 = 70$\n| 49  | 14 | 0 | $2 \\times 49 -2 \\times 14 - 3\\times 0 = 70$\n| 66  | 31 | 1 | $2 \\times 66 -2 \\times 31 - 3\\times 1 = 67$\n|70   | 35 | 5 | $2 \\times 70 -2 \\times 35 - 3\\times 5 = 55$\n|80   | 45 | 15 | $2 \\times 80 -2 \\times 45 - 3\\times 15 = 25$\n:::\n\n## Linear Splines {.small}\n\n:::{.panel-tabset}\n\n### Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](10-non-linear_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n### Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_ <- predict(lm(y ~ b1 + b2 + b3, data = d))\n\nggplot(d, aes(x = b1, y = p_)) +\n  geom_point() +\n  labs(x = \"X\",\n       y = expression(hat(y)))\n```\n:::\n\n\n\n:::\n\n\n## Linear Splines {.small}\n\n\n:::{.panel-tabset}\n\n### Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](10-non-linear_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n### Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnewdat <- tibble(\n  b1 = 4:80,\n  b2 = ifelse(b1 > 35, b1 - 35, 0),\n  b3 = ifelse(b1 > 65, b1 - 65, 0)\n)\np <- predict(lm(y ~ b1 + b2 + b3, data = d),\n             newdata = newdat)\n\nggplot(newdat, aes(x = b1, y = p)) +\n  geom_point() + \n  labs(x = \"X\",\n       y = expression(hat(y)))\n```\n:::\n\n\n\n:::\n\n## Cubic Splines {.small}\n\n*A cubic splines with knots at* $\\xi_i, k = 1, \\dots, K$ is a piecewise\ncubic polynomial with continuous derivatives up to order 2 at each knot.\n\nAgain we can represent this model with truncated power functions\n\n$$y_i = \\beta_0 + \\beta_1b_1(x_i)+\\beta_2b_2(x_i)+\\dots+\\beta_{K+3}b_{K+3}(x_i) + \\epsilon_i$$\n\n$$\\begin{align}b_1(x_i)&=x_i\\\\b_2(x_i)&=x_i^2\\\\b_3(x_i)&=x_i^3\\\\b_{k+3}(x_i)&=(x_i-\\xi_k)^3_+, k = 1,\\dots,K\\end{align}$$\n\nwhere\n\n$$(x_i-\\xi_k)^{3}_+=\\begin{cases}(x_i-\\xi_k)^3&\\textrm{if }x_i>\\xi_k\\\\0&\\textrm{otherwise}\\end{cases}$$\n\n## <i class=\"fas fa-pen\"></i> `Application Exercise` {.small}\n\nLet's create data set to fit a *cubic spline* with 2 knots: 35 and 65.\n\n:::: columns\n\n::: {.column width=\"20%\"}\n\n| x   |\n|-----|\n| 4   |\n| 15  |\n| 25  |\n| 37  |\n| 49  |\n| 66  |\n|70   |\n|80   |\n:::\n\n::: {.column width=\"80%\"}\n::: nonincremental\n1.  Using the data to the left create a new dataset with five variables: $b_1(x), b_2(x), b_3(x), b_4(x), b_5(x)$\n2.  Write out the equation you would be fitting to estimate the effect\non some outcome *y* using this cubic spline\n:::\n:::\n\n::::\n\n## Cubic Spline {.smaller}\n\n:::: columns\n\n::: {.column width=\"20%\"}\n\n| x   |\n|-----|\n| 4   |\n| 15  |\n| 25  |\n| 37  |\n| 49  |\n| 66  |\n|70   |\n|80   |\n\n:::\n\n::: {.column width=\"10%\"}\n\n### ‚û°Ô∏è\n:::\n\n::: {.column width=\"70%\"}\n\n:::{.panel-tabset}\n\n### Example\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n| b1|   b2|     b3|    b4|   b5|\n|--:|----:|------:|-----:|----:|\n|  4|   16|     64|     0|    0|\n| 15|  225|   3375|     0|    0|\n| 25|  625|  15625|     0|    0|\n| 37| 1369|  50653|     8|    0|\n| 49| 2401| 117649|  2744|    0|\n| 66| 4356| 287496| 29791|    1|\n| 70| 4900| 343000| 42875|  125|\n| 80| 6400| 512000| 91125| 3375|\n\n\n:::\n:::\n\n\n\n### Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd |>\n  mutate(b2 = b1^2,\n         b3 = b1^3,\n         b4 = ifelse(b1 > 35, (b1 - 35)^3, 0),\n         b5 = ifelse(b1 > 65, (b1 - 65)^3, 0)\n  ) -> d\nd |>\n  select(-y) |>\n  knitr::kable()\n```\n:::\n\n\n\n:::\n\n:::\n\n::::\n\n## Cubic Spline {.small}\n\n\n:::{.panel-tabset}\n\n### Fit Result\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|term        | estimate| std.error| statistic| p.value|\n|:-----------|--------:|---------:|---------:|-------:|\n|(Intercept) |    1.172|     8.282|     0.141|   0.900|\n|b1          |    1.520|     1.565|     0.971|   0.434|\n|b2          |    0.040|     0.075|     0.528|   0.650|\n|b3          |   -0.001|     0.001|    -0.855|   0.483|\n|b4          |    0.001|     0.002|     0.635|   0.590|\n|b5          |   -0.006|     0.007|    -0.860|   0.480|\n\n\n:::\n:::\n\n\n\n### Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm(y ~ b1 + b2 + b3 + b4 + b5, data = d) |>\n  tidy() |>\n  knitr::kable(digits = 3)\n```\n:::\n\n\n\n:::\n\n## Cubic Splines {.small}\n\n\n:::{.panel-tabset}\n\n### Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](10-non-linear_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n\n### Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_ <- predict(lm(y ~ b1 + b2 + b3 + b4 + b5, data = d))\n\nggplot(d, aes(x = b1, y = p_)) +\n  geom_point() +\n  labs(x = \"X\",\n       y = expression(hat(y)))\n```\n:::\n\n\n\n:::\n\n## Cubic Splines {.small}\n\n:::{.panel-tabset}\n\n### Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](10-non-linear_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n\n### Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnewdat <- tibble(\n  b1 = 4:80,\n  b2 = b1^2,\n  b3 = b1^3,\n  b4 = ifelse(b1 > 35, (b1 - 35)^3, 0),\n  b5 = ifelse(b1 > 65, (b1 - 65)^3, 0)\n)\np <- predict(lm(y ~ b1 + b2 + b3 + b4 + b5, data = d),\n             newdata = newdat)\n\nggplot(newdat, aes(x = b1, y = p)) +\n  geom_point() + \n  labs(x = \"X\",\n       y = expression(hat(y)))\n```\n:::\n\n\n\n:::\n\n## Cubic Splines {.small}\n\n:::{.panel-tabset}\n\n### Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](10-non-linear_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n\n### Code\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnewdat <- tibble(\n  b1 = -100:100,\n  b2 = b1^2,\n  b3 = b1^3,\n  b4 = ifelse(b1 > 35, (b1 - 35)^3, 0),\n  b5 = ifelse(b1 > 65, (b1 - 65)^3, 0)\n)\np <- predict(lm(y ~ b1 + b2 + b3 + b4 + b5, data = d),\n             newdata = newdat)\n\nggplot(newdat, aes(x = b1, y = p)) +\n  geom_point() + \n  geom_vline(xintercept = c(4, 80), lty = 2) +\n  labs(x = \"X\",\n       y = expression(hat(y)))\n```\n:::\n\n\n\n:::\n\n## Natural cubic splines {.small}\n\n*A natural cubic spline extrapolates linearly beyond the boundary knots*\n\nThis adds 4 extra constraints and allows us to put **more** internal knots for the same degrees of freedom as a regular cubic spline\n\n<img src=\"img/natural.png\" height=\"400\"/></img>\n\n## Natural Cubic Splines {.small}\n\n:::{.panel-tabset}\n\n### Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](10-non-linear_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n\n### Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- predict(lm(y ~ splines::ns(b1, knots = c(35, 65)), data = d),\n             newdata = newdat)\n\nggplot(newdat, aes(x = b1, y = p)) +\n  geom_point() + \n  geom_vline(xintercept = c(4, 80), lty = 2) +\n  labs(x = \"X\",\n       y = expression(hat(y)))\n```\n:::\n\n\n\n:::\n\n## Natural Cubic Splines {.small}\n\n:::{.panel-tabset}\n\n### Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](10-non-linear_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n\n### Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nda <- tibble(\n  x = newdat$b1,\n  ns = predict(lm(y ~ splines::ns(b1, knots = c(35, 65)), data = d),\n             newdata = newdat),\n  cubic = predict(lm(y ~ b1 + b2 + b3 + b4 + b5, data = d), \n                  newdata = newdat),\n  linear = predict(lm(y ~ b1 + ifelse(b1>35, b1 - 35, 0) + ifelse(b1>65, b1 - 65, 0), data = d),\n                   newdata = newdat)\n) |>\n  pivot_longer(ns:linear)\n\nda |>\n  filter(name != \"linear\") |>\nggplot(aes(x = x, y = value, color = name)) +\n  geom_point(alpha = 0.5) + \n  geom_vline(xintercept = c(4, 80), lty = 2) +\n  labs(x = \"X\",\n       y = expression(hat(y)),\n       color = \"Spline\")\n```\n:::\n\n\n\n:::\n\n## Natural Splines {.small}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(da, aes(x = x, y = value, color = name)) +\n  geom_point(alpha = 0.5) + \n  geom_vline(xintercept = c(4, 80), lty = 2) +\n  labs(x = \"X\",\n       y = expression(hat(y)),\n       color = \"Spline\")\n```\n\n::: {.cell-output-display}\n![](10-non-linear_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\n\n## Knot placement {.small}\n\n-   One strategy is to decide $K$ (the number of knots) in advance and\nthen place them at appropriate quantiles of the observed $X$\n-   A cubic spline with $K$ knots has $K+3$ parameters (or degrees of\nfreedom!)\n-   A natural spline with $K$ knots has $K-1$ degrees of freedom\n\n## Knot placement {.small}\n\nHere is a comparison of a degree-14 polynomial and natural cubic spline\n(both have 15 degrees of freedom)\n\n<img src=\"img/knots.png\" height=\"500\"/></img>\n\n\n## Acknowledgements {.smaller}\n\nThe content in the slides is from \n \n- Chapter 7 of [Introduction to Statistical Learning, 2nd Ed](https://hastie.su.domains/ISLR2/ISLRv2_corrected_June_2023.pdf.download.html) by James, Witten, Hastie, and Tibshirani\n- Initial versions of the slides are by Dr. Lucy D‚ÄôAgostino McGowan\n",
    "supporting": [
      "10-non-linear_files\\figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}